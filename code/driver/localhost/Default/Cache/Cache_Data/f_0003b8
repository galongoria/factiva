/*
* AutoSuggest Web Widget v4.0
* Includes require.js v1.0.2
* Date: Oct 06 2014
* Last Modified By Dilip Gavara
*/

if (typeof (np) === "undefined") {
    var np = {};
}
if (typeof (np.web) === "undefined") {
    np.web = {};
}
if (typeof (np.web.widgets) === "undefined") {
    np.web.widgets = {};
}
if (typeof (np.web.widgets.tokens) === "undefined") {
    np.web.widgets.tokens = {};
}

if (!np.web.widgets.autocomplete) {
    //Common Resource locations
    np.web.widgets.requireJsUrl = 'https://utilityhandlers-factiva-com.ezproxy.lib.utexas.edu/handlers/WebResource.axd?d=ApOeMViEEnh_ylSMUY-bXT6lQVysmfM3CwsLAlxkGzfuT8loFfeyhl2Hwv6Qx0vNk_s175azPrWURSfLREtaz4gMS7C2LfBIluKUsU3XYgrILwoU92qgz76QUQ2UWJIxr8O8FMUNoLZzZR1QAifNBX2xfvhOSJ2gOx615Z0LfkoaBeGU0&t=637988932040000000';
    np.web.widgets.jQueryUrl = 'https://utilityhandlers-factiva-com.ezproxy.lib.utexas.edu/handlers/WebResource.axd?d=Ud5dhiVcqDCg7AUO3lQwFQqs_0fWNBzDWxcHqLTjaS4T_yGQ4YlXZX9YW8rxrXJ2WY_MPBy39n2LnrJHirr0xdo15QB5vHa7U6T8MtcUKK4Rp8yxcnMTeLh727Kk5YV9kwMqS_iIxs8fwAx7AuwfkiNiGtZl1QTpxKp6nny2NJPTaahA0&t=637988932040000000';

    //AutoSuggest resource locations
    np.web.widgets.autocompleteUrl = 'https://utilityhandlers-factiva-com.ezproxy.lib.utexas.edu/handlers/WebResource.axd?d=9hPjHxQS9kFkz8yis5oSRmjWAJY9ubhfqgVXSbTAa-mPUfD4apwACJAmlscgoyPw8jAoJl4bu886JP-9ohnAUyetTdJMuFrKwaKl2JZ0nVgLYp-WqVB8_ERWa9yY526IgcKdN5Ep9_Lug8QxUyYQ--LWpgT9uJLJI0e98QKANOvLrJCi9Xnttixr0IHAFMwDqOqEpA2&t=637988932040000000';
    np.web.widgets.jsonpUrl = 'https://utilityhandlers-factiva-com.ezproxy.lib.utexas.edu/handlers/WebResource.axd?d=IS7ZCmhQ__Q2XOL34kd5ZbiyV6oICMy8ZeotWq1X51ZLpMEKRQiQtplafPOdk52GGw3IcaagocX8amr95CI3252na5XdAepFhRM_k9lBrwq4JM_FbCmv4MipYCfeFaJ4aB5csZ3UlSMVdsNgEHmbBYVMQV5TqpW1rRJFwj0-P5P8J9VXUYqgXzBDL3hwtZwe2K9VhA2&t=637988932040000000';
    np.web.widgets.autocompleteCssUrl = 'https://utilityhandlers-factiva-com.ezproxy.lib.utexas.edu/handlers/WebResource.axd?d=B3PXZMBd48nfb2gOOC-_l07sLAzPoA6p-Yh9nO7vzcppNOYbYWgu8_pW-VnkAN8_Vg-lBGvZVTAALTJMFo-AYVXrbCmF6uDgWD9o4dHyycaG-hIDv5Cz39cUDryNmF9QDUW05cMAaEy4KWvU_uAJGYv0pBSks7CbaCsXDKF4YVM-pVWX0&t=637988932040000000';
    np.web.widgets.jQueryBgiFrameUrl = 'https://utilityhandlers-factiva-com.ezproxy.lib.utexas.edu/handlers/WebResource.axd?d=HS-GK3qNXZR56TV-EKL5kI2tOb4p0tTnbOZE1T5sXdQH0KCqTDt5GtUeEVUPfxVjeEirrefFNvhwKQRQNBQCDBwmYB7K9n27ApQmOr4hiK3brUHv_UTW9WNY2q_z6jS8GECAfO44tnQAApU8O3pCf55cbwrFrbtp8eKlk4sLY17UaHL70&t=637988932040000000';

    np.web.widgets.autocomplete = function (settings) {
        var autocompleteProtoType = np.web.widgets.autocomplete.prototype;
        if (settings != undefined) {
            var targetObj = document.getElementById(settings.controlId);
            if (!targetObj || targetObj.type != 'text') {
                document.write("<input id=\"" + settings.controlId + "\" name=\"" + settings.controlId + "\" class=\"" + settings.controlClassName + "\" type=\"text\"/>");
            }
            //Enable/Disable Speech Input | Default: disabled
            if (settings.speechInput && settings.onSpeechChange) {
                $(targetObj).attr("x-webkit-speech", "x-webkit-speech");
                $(targetObj).on("webkitspeechchange", function() {
                    settings.onSpeechChange(this.value);
                });
            }
        }

        //call the main function if require.js is already loaded
        if (typeof (requirejs) != "undefined") {
            scriptLoadHandler();
        }
        //require.js initialized but not loaded yet
        else if (autocompleteProtoType.requireJSInitialized && !autocompleteProtoType.requireJSLoaded) {
            autocompleteProtoType.settingsArrObj.push(settings);
        }
        else {//require.js not initialized
            loadRequireJS();
        }

        //Load requireJS if not present
        function loadRequireJS() {
            autocompleteProtoType.requireJSInitialized = true;
            var script_tag = document.createElement('script');
            script_tag.setAttribute("type", "text/javascript");
            script_tag.setAttribute("src", np.web.widgets.requireJsUrl);
            script_tag.onload = scriptLoadHandler;
            script_tag.onreadystatechange = function() { // Same thing but for IE
                if (this.readyState == 'complete' || this.readyState == 'loaded') {
                    scriptLoadHandler();
                }
            };
            // Try to find the head, otherwise default to the documentElement
            (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(script_tag);
        }

        //Load scripts in order
        function scriptLoadHandler() {
            autocompleteProtoType.requireJSLoaded = true;
            main();
        }

        //Main function to load jQuery, bgiframe (for IE6 z-index bug) & autocomplete plugin
        function main() {
            /******** Load jQuery if not present *********/
            if (window.jQuery === undefined || window.jQuery.fn.jquery < '1.3.2') {
                if (settings != undefined) {
                    //If all the scripts are loaded initialize the autosuggest directly
                    if (autocompleteProtoType.resourceLoadingInitialized && autocompleteProtoType.resourcesLoaded) {
                        initAutoComplete.call(np.web.widgets, settings);
                    }
                    else //Resource Loading Initialized but not loaded yet. So push the settings obj into the settings Array and defer the initialization
                        if (autocompleteProtoType.resourceLoadingInitialized && !autocompleteProtoType.resourcesLoaded) {
                        autocompleteProtoType.settingsArrObj.push(settings);
                    }
                    else {
                        autocompleteProtoType.settingsArrObj.push(settings);
                        autocompleteProtoType.resourceLoadingInitialized = true;
                        require([np.web.widgets.jQueryUrl, np.web.widgets.jQueryBgiFrameUrl, np.web.widgets.autocompleteUrl, np.web.widgets.jsonpUrl], function() {
                            jQuery = window.jQuery.noConflict(true);
                            autocompleteProtoType.jQuery = jQuery;
                            $ = jQuery;
                            autocompleteProtoType.resourcesLoaded = true;
                            $.each(autocompleteProtoType.settingsArrObj, function() {
                                initAutoComplete.call(np.web.widgets, this);
                            });
                        });
                    }
                }
            }
            else {
                // The jQuery version on the window is the one we want to use
                if (settings != undefined) {
                    jQuery = window.jQuery;
                    $ = jQuery;
                    //If all the scripts are loaded initialize the autosuggest directly
                    if (autocompleteProtoType.resourceLoadingInitialized && autocompleteProtoType.resourcesLoaded) {
                        initAutoComplete.call(np.web.widgets, settings);
                    }
                    else //Resource Loading Initialized but not loaded yet. So push the settings obj into the settings Array and defer the initialization
                        if (autocompleteProtoType.resourceLoadingInitialized && !autocompleteProtoType.resourcesLoaded) {
                        autocompleteProtoType.settingsArrObj.push(settings);
                    }
                    else {//Resource Loading initialized for the first time
                        autocompleteProtoType.settingsArrObj.push(settings);
                        autocompleteProtoType.resourceLoadingInitialized = true;
                        require([np.web.widgets.jQueryBgiFrameUrl, np.web.widgets.autocompleteUrl, np.web.widgets.jsonpUrl], function() {
                            autocompleteProtoType.resourcesLoaded = true;
                            $.each(autocompleteProtoType.settingsArrObj, function() {
                                initAutoComplete.call(np.web.widgets, this);
                            });
                        });
                    }
                }
            }
        }

        //Global object which hold the settings object of the input box once the focus
        //reaches out of scope

        //Object which gives value depending on autosuggestion type
        var getValueByAutoSuggestType = {
            author: "formalName",
            outlet: "formalName",
            executive: "completeName",
            company: "value",
            privatemarketcompany: "companyName",
            privatemarketindustry: "industryName",
            privatemarketregion: "regionName",
            company: "value",
            region: "descriptor",
            publishercity: "formalName",
            publishermetadata: "name",
            newssubject: "descriptor",
            industry: "descriptor",
            source: "formalName",
            keyword: "word",
            region_all: "descriptor",
            region_country: "descriptor",
            region_stateorprovince: "descriptor",
            region_metropolitanarea: "descriptor",
            region_subnationalregion: "descriptor",
            region_supranationalregion: "descriptor",
            calendarkeyword: "word",
            calendarcompany: "companyName",
            pmdealscompany: "name",
            pmdealsindustry: "name",
            pmdealsregion: "name",
            pmdealssubject: "name",
            pmdealsfunds: "name",
            currencycrossrate: "name",
            commodity: "name",
            commodityalias: "name",
            journalist: "formalName"
        };

        //Object which gives name depending on autosuggestion type
        var getNameByAutoSuggestType = {
            author: "author",
            outlet: "outlet",
            executive: "executive",
            company: "company",
            region: "region",
            publishercity: "publisherCity",
            publishermetadata: "publisherData",
            newssubject: "newsSubject",
            industry: "industry",
            source: "source",
            keyword: "keyWord",
            region_all: "region",
            region_country: "region",
            region_stateorprovince: "region",
            region_metropolitanarea: "region",
            region_subnationalregion: "region",
            region_supranationalregion: "region",
            calendarkeyword: "keyword",
            calendarcompany: "calendarCompany",
            currencycrossrate: "factivaData",
            commodity: "factivaData",
            commodityalias: "factivaData",
            journalist: "journalists"
        };

        //Build parameters
        function SetExtraParams(settings) {
            var colSpan = "1";
            if (settings.columns != undefined && settings.columns != null) {
                colSpan = settings.columns.split("|").length;
                if (colSpan == 0)
                    colSpan = 1;
            }
            var paramsObj = {
                format: 'json',
                maxResults: 10,
                autocompletionType: settings.autocompletionType,
                suggestContext: settings.suggestContext,
                columnCount: colSpan,
                searchText: function() {
                    return $("#" + settings.controlId).val();
                },
                showViewAllPrivateMarkets: $.isFunction(settings.onViewMorePrivateMarketsClick)
            }
            if (settings.tokens === undefined || settings.tokens === null) {
                settings.tokens = {};
            }
            settings.tokens = $.extend({}, np.web.widgets.tokens.autocomplete, settings.tokens);
            return $.extend({}, paramsObj, settings.options);
        }

        //Set CSS Default Classes
        function SetCssDefaults(settings) {
            if (settings.resultsClass == undefined) { settings.resultsClass = "dj_emg_autosuggest_results"; }
            if (settings.resultsEvenClass == undefined) { settings.resultsEvenClass = "dj_emg_autosuggest_even" }
            if (settings.resultsOddClass == undefined) { settings.resultsOddClass = "dj_emg_autosuggest_odd" }
            if (settings.resultsOverClass == undefined) { settings.resultsOverClass = "dj_emg_autosuggest_over" }
            if (settings.viewAllClass == undefined) { settings.viewAllClass = "dj_emg_autosuggest_viewall" }
        }

        //Get Autosuggest List Item
        function getFormattedRow(settings, row, defaultVal) {
            var t = [];
            var tokens = settings.tokens;
            var extraTknInfo = row[getValueByAutoSuggestType[row.controlType.toLowerCase()]];
            var infoTitleTknArrPreVal, infoTitleTknArrPostVal, newInfoTitleTkn;
            if ((tokens.infoTitleTknPre != undefined) && (tokens.infoTitleTknPost != undefined) && (tokens.infoTitleTknPre != null) && (tokens.infoTitleTknPost != null)) {
                var infoTitleTknStr = new String(tokens.infoTitleTkn);
                var infoTitleTknArr = infoTitleTknStr.split('|');
                if (tokens.infoTitleTkn != undefined) {
                    infoTitleTknArrPreVal = (infoTitleTknArr[0] != undefined) ? infoTitleTknArr[0] : "";
                    infoTitleTknArrPostVal = (infoTitleTknArr[2] != undefined) ? infoTitleTknArr[2] : "";
                    if (infoTitleTknArr[1] === "true") {
                        newInfoTitleTkn = infoTitleTknArrPreVal + " " + extraTknInfo + " " + infoTitleTknArrPostVal;
                    }
                    else {
                        newInfoTitleTkn = infoTitleTknArrPreVal + " " + infoTitleTknArrPostVal;
                    }
                }
                else {
                    newInfoTitleTkn = tokens.infoTitleTknPre + " " + tokens.infoTitleTknPost;
                }
            }
            else {
                newInfoTitleTkn = tokens.infoTitleTknPre + " " + tokens.infoTitleTknPost;
            }

            //ex:"{infoTitleTknPre}|true|{infoTitleTknPost}"
            /*
            {infoTitleTkn}: Token Title
            true: include Default Column Value
            pre: append the Default Column Value before the token title
            */

            var colArr;
            var eventObj = {
                "onInfoClick": $.isFunction(settings.onInfoClick),
                "onPromoteClick": $.isFunction(settings.onPromoteClick),
                "onNotClick": $.isFunction(settings.onNotClick)
            };
            var eventCount = 0;
            for (var i in eventObj) {
                if (eventObj[i] === true) {
                    eventCount = eventCount + 1;
                }
            }

            if (settings.columns !== undefined) {
                colArr = settings.columns.split("|");
            }

            if (!settings.columns || colArr.length === 1) {
                t[t.length] = "<td>";
                var sourceClass = "";
                var sourceToken = "";
                if ((settings.autocompletionType.toLowerCase() === "source")) {
                    sourceClass = " acSource_" + row.type;
                    switch (row.type.toLowerCase()) {
                        case "sourcefamily":
                            sourceToken = settings.tokens["sourcefamilyTkn"];
                            break;
                        case "publication":
                            sourceToken = settings.tokens["publicationTkn"];
                            break;
                        case "webpage":
                            sourceToken = settings.tokens["webpageTkn"];
                            break;
                        case "multimedia":
                            sourceToken = settings.tokens["multimediaTkn"];
                            break;
                        case "picture":
                            sourceToken = settings.tokens["pictureTkn"];
                            break;
                        case "blog":
                            sourceToken = settings.tokens["blogTkn"];
                            break;
                    }
                }

                t[t.length] = " <div class=\"ac_descriptor" + sourceClass + "\">";
                if (settings.autocompletionType.toLowerCase() === "source") {
                    t[t.length] = "<span title=\"" + sourceToken + "\" class=\"" + sourceClass + "\">" + sourceToken + ":</span> ";
                }
                t[t.length] = defaultVal;

                if (settings.autocompletionType.toLowerCase() === "author" && row.isPrimaryOutlet) {
                    t[t.length] = " <span class=\"ac_diasambiguityOutlet\">(";
                    t[t.length] = row.outletName;
                    t[t.length] = ")</span>";
                }
                if (settings.autocompletionType.toLowerCase() === "journalist" && row.publication && row.publication.length > 0) {
                    t[t.length] = " <span class=\"ac_diasambiguityOutlet\">(";
                    t[t.length] = row.publication;
                    t[t.length] = ")</span>";
                }

                if (settings.autocompletionType.toLowerCase() === "executive" && row.companyName && row.companyName.length > 0) {
                    t[t.length] = " <span class=\"ac_executiveCompany\">(";
                    t[t.length] = row.companyName;
                    t[t.length] = ")</span>";
                }

                t[t.length] = "</div>";

                if ((settings.autocompletionType != "KeyWord") && $.isFunction(settings.onInfoClick)) {

                    t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_info\" title=\"" + newInfoTitleTkn + "\">information</a>";
                }

                if ($.isFunction(settings.onPromoteClick)) {
                    t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_promote\" title=\"" + tokens.promoteTitleTkn + "\">promote</a>";
                }

                if ($.isFunction(settings.onNotClick)) {
                    t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_not\" title=\"" + tokens.notTitleTkn + "\">not</a>";
                }

                if ((settings.autocompletionType.toLowerCase() === "source")) {
                    if (row.status.toLowerCase() === "discont") {
                        t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_discont\" title=\"" + tokens.disContTkn + "\">discontinued</a>";
                    }
                }

                if (settings.autocompletionType.toLowerCase() === "author") {
                    if (!row.isActive) {
                        t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_discont\" title=\"" + tokens.disContTkn + "\">discontinued</a>";
                    }
                }

                t[t.length] = "</td>";
            }
            else {
                for (var c = 0; c < colArr.length; c++) {
                    t[t.length] = "<td>" + row[colArr[c]] + "</td>";
                }
                if (eventCount > 0) {
                    t[t.length] = "<td>";
                    for (var e in eventObj) {
                        switch (e.toLowerCase()) {
                            case "oninfoclick":
                                if ((settings.autocompletionType != "KeyWord") && (eventObj[e] === true)) {
                                    t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_info\" title=\"" + newInfoTitleTkn + "\">information</a>";
                                }
                                break;
                            case "onpromoteclick":
                                if (eventObj[e] === true) {
                                    t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_promote\" title=\"" + tokens.promoteTitleTkn + "\">promote</a>";
                                }
                                break;
                            case "onnotclick":
                                if (eventObj[e] === true) {
                                    t[t.length] = "<a href=\"javascript:void(0)\" class=\"ac_not\"" + tokens.notTitleTkn + "\">not</a>";
                                }
                                break;
                        }
                    }
                    t[t.length] = "</td>";
                }
            }
            return t.join("");
        }

        //Function to get Formatted Category Row
        function getFormattedCategoryRow(settings, row) {
            var t = [];
            var rowValue = row[getValueByAutoSuggestType[row.controlType.toLowerCase()]];
            t[t.length] = "<td><div class=\"ac_descriptor\">";
            t[t.length] = rowValue;
            switch (row.controlType.toLowerCase()) {
                case "executive":
                    if (row.companyName && row.companyName.length > 0) {
                        t[t.length] = " <span class=\"ac_executiveCompany\">(";
                        t[t.length] = row.companyName;
                        t[t.length] = ")</span>";
                    }
                    break;
            }
            t[t.length] = "</div></td>";
            switch (row.controlType.toLowerCase()) {
                case "pmdealsfunds":
                case "pmdealssubject":
                case "pmdealsregion":
                case "pmdealsindustry":
                case "pmdealscompany":
                    var column_names = settings.columns.split("|");
                    for (var column = 0; column < column_names.length; column++) {
                        var column_name = column_names[column];
                        if (column_name != "name") {
                            t[t.length] = "<td><div class=\"ac_executiveCompany\">";
                            t[t.length] = row[column_name];
                            t[t.length] = "</div></td>";
                        }
                    }
                    break;
            }
            return t.join("");
        }

        //Function to get Authentication Token
        function getSuggestContextAndProcessRequest(settings) {
            var isUrlGenerated = false;
            //No valid authentication token. So generate a token based on sessionid or encrypted key
            if (settings.url.indexOf("/Search/") > 0) {
                var authenticationUrl = settings.url.replace("/Search/", "/Authenticate/");
                if ($.trim(settings.useSessionId).length > 0) {
                    authenticationUrl = authenticationUrl + "/" + "RegisterUsingSessionId?SID=" + settings.useSessionId;
                    isUrlGenerated = true;
                }
                else if ($.trim(settings.useEncryptedKey).length > 0) {
                    authenticationUrl = authenticationUrl + "/" + "RegisterUsingEncryptedKey?eid=" + settings.useEncryptedKey;
                    isUrlGenerated = true;
                }

                if (isUrlGenerated === true) {
                    np.web.widgets.autocomplete.prototype.suggestContextObj.callInitiated = true;
                    //Call the transaction and get the authentication token
                    //$.jsonp({
                    //    url: authenticationUrl,
                    //    callbackParameter: "callback",
                    //    success: function(data, textStatus) {
                    //        if (data.error != undefined) {
                    //            if ($.isFunction(settings.onError)) {
                    //                settings.onError(data.error);
                    //            }
                    //        }
                    //        else {
                    //            var settingsArrObj = np.web.widgets.autocomplete.prototype.settingsArrObj;
                    //            if (settingsArrObj.length > 0) {
                    //                $.each(settingsArrObj, function(idx, settings) {
                    //                    //Get the Key and process the request
                    //                    settings.suggestContext = URLDecode(data.key);
                    //                    np.web.widgets.autocomplete.prototype.suggestContextObj.authToken = data.key;
                    //                    processRequest.call(np.web.widgets, settings);
                    //                });
                    //            }
                    //        }
                    //    }
                    //});
                    $.ajax({
                        url: authenticationUrl,
                        jsonp: "callback",
                        dataType: "jsonp",
                        success: function (data) {
                            if (data.error != undefined) {
                                if ($.isFunction(settings.onError)) {
                                    settings.onError(data.error);
                                }
                            }
                            else {
                                var settingsArrObj = np.web.widgets.autocomplete.prototype.settingsArrObj;
                                if (settingsArrObj.length > 0) {
                                    $.each(settingsArrObj, function (idx, settings) {
                                        //Get the Key and process the request
                                        settings.suggestContext = URLDecode(data.key);
                                        np.web.widgets.autocomplete.prototype.suggestContextObj.authToken = data.key;
                                        processRequest.call(np.web.widgets, settings);
                                    });
                                }
                            }
                        }
                    });
                }
            }
        }

        //Function to decode a URL
        function URLDecode(encodedString) {
            var output = encodedString;
            var binVal, thisString;
            var myregexp = /(%[^%]{2})/;
            while (((match = myregexp.exec(output)) !== null) && (match.length > 1) && (match[1] !== '')) {
                binVal = parseInt(match[1].substr(1), 16);
                thisString = String.fromCharCode(binVal);
                output = output.replace(match[1], thisString);
            }
            return output;
        }

        //Function to get parsed category rows
        function processCategories(data, settings, rows) {
            data = data.category;
            for (var dtCat = 0; dtCat < data.length; dtCat++) {
                var catArr = settings.options.categories.split("|");
                var acName = getNameByAutoSuggestType[catArr[dtCat].toLowerCase()];
                var acValue = getValueByAutoSuggestType[catArr[dtCat].toLowerCase()];
                var catData = data[dtCat][acName];
                if (catData != null) {
                    for (var m = 0; m < catData.length; m++) {
                        var t = catData[m];
                        t.controlType = catArr[dtCat];
                        var headerTkn = catArr[dtCat] + "Tkn";
                        t.groupHeading = settings.tokens[headerTkn];
                        t.isCategory = true;
                        var categoryRow = { data: t, value: t[acValue], result: t[acValue] };
                        rows.push(categoryRow);
                    }
                }
            }
        }

        //Function to get parsed privatemarkets rows
        function processPrivateMarkets(data, settings, rows) {
            var category_types = settings.options["types"].split("|");
            for (var cattype = 0; cattype < category_types.length; cattype++) {
                var category_type = category_types[cattype].toLowerCase().replace("_", "s");
                for (var pmCount = 0; pmCount < data.privateMarket.length; pmCount++) {
                    if (data.privateMarket[pmCount]["__type"].toLowerCase().indexOf(category_type) > -1) {
                        //populate the rows
                        var pmType;
                        var pmCategory;
                        if (category_type.toLowerCase().indexOf("pmdeals") > -1) {
                            pmType = category_type;
                            pmCategory = "pmDealData";
                        }
                        else {
                            pmType = "privateMarket" + category_type.charAt(0).toUpperCase() + category_type.substring(1);
                            pmCategory = pmType;
                        }
                        var headerTkn = pmType + "HeaderTkn";
                        var footerLinkTkn = pmType + "ViewMoreTkn";
                        var privateMarketItemsByTypeCount = data.privateMarket[pmCount][pmCategory].length;
                        var countTkn = pmType + "CountTkn";
                        if (settings.tokens[countTkn] != undefined) {
                            privateMarketItemsByTypeCount = settings.tokens[countTkn];
                        }
                        //Begin of for pop rows
                        for (var i = 0; i < privateMarketItemsByTypeCount; i++) {
                            if (undefined != data.privateMarket[pmCount][pmCategory][i]) {
                                var pmDataObj = data.privateMarket[pmCount][pmCategory][i];
                                pmDataObj.controlType = pmType;
                                pmDataObj.groupHeading = settings.tokens[headerTkn];
                                pmDataObj.groupFooterLinkText = settings.tokens[footerLinkTkn];
                                pmDataObj.isCategory = true;
                                pmDataObj.isLastInCategory = false;
                                if (i === privateMarketItemsByTypeCount - 1) {
                                    pmDataObj.isLastInCategory = true;
                                }
                                var categoryRow = { data: pmDataObj, value: pmDataObj[getValueByAutoSuggestType[pmType.toLowerCase()]], result: pmDataObj[getValueByAutoSuggestType[pmType.toLowerCase()]] };
                                rows.push(categoryRow);
                            }
                        }  //end of for pop rows 
                        break;
                    } //end of if
                } //end of for private markets type
            } // end of for loops - different category types ( company | industry | region  )
        }

        //Function to get parsed rows
        function getParsedRows(autoCompletionType, data, rows, settings) {
            switch (autoCompletionType.toLowerCase()) {
                case "categories":
                    processCategories(data, settings, rows);
                    break;
                case "privatemarkets":
                    processPrivateMarkets(data, settings, rows)
                    break;
                default:
                    var acName = getNameByAutoSuggestType[autoCompletionType.toLowerCase()];
                    var acValue = getValueByAutoSuggestType[autoCompletionType.toLowerCase()];
                    data = data[acName];
                    for (var i = 0; i < data.length; i++) {
                        var t = data[i];
                        t.controlType = autoCompletionType;
                        rows[i] = { data: t, value: t[acValue], result: t[acValue] };
                    }
            }
            return rows;
        }

        //Function to get formatted item
        function getFormattedItem(autoCompletionType, settings, row) {
            var acValue = getValueByAutoSuggestType[autoCompletionType.toLowerCase()];
            var formattedItem;
            switch (autoCompletionType.toLowerCase()) {
                case "categories":
                case "privatemarkets":
                    formattedItem = getFormattedCategoryRow(settings, row);
                    break;
                default:
                    formattedItem = getFormattedRow(settings, row, row[acValue]);
            }
            return formattedItem;
        }

        //Function to check whether a file is loaded
        function checkloadjscssfile(filename, filetype) {
            var filesadded = np.web.widgets.autocomplete.prototype.filesadded;
            if (filesadded.indexOf("[" + filename + "]") === -1) {
                loadjscssfile(filename, filetype);
                filesadded = filesadded + "[" + filename + "]"; //List of files added in the form "[filename1],[filename2],etc"
            }
            np.web.widgets.autocomplete.prototype.filesadded = filesadded;
        }

        function loadjscssfile(filename, filetype) {
            if (filetype == "js") { //if filename is a external JavaScript file
                var fileref = document.createElement('script')
                fileref.setAttribute("type", "text/javascript")
                fileref.setAttribute("src", filename)
            }
            else if (filetype == "css") { //if filename is an external CSS file
                var fileref = document.createElement("link")
                fileref.setAttribute("rel", "stylesheet")
                fileref.setAttribute("type", "text/css")
                fileref.setAttribute("href", filename)
            }
            if (typeof fileref != "undefined")
                document.getElementsByTagName("head")[0].appendChild(fileref)
        }

        //Function to process request (makes a REST API asynchronous call)
        function processRequest(settings) {
            //Load Default CSS
            checkloadjscssfile(this.autocompleteCssUrl, "css")

            //Set Default CSS Classes
            SetCssDefaults(settings);
            $("#" + settings.controlId)._djAutocomplete(settings.url + "/" + settings.autocompletionType + "", {
                dataType: 'jsonp',
                parse: function(data) {
                    window.globalSettingsObj = settings;
                    if (data.error != undefined) {
                        if ($.isFunction(settings.onError)) {
                            settings.onError(data.error);
                        }
                    }
                    else {
                        if ($.isFunction(settings.getCount)) {
                            if (data && (data.count > -1)) {
                                settings.getCount(data.count);
                            }
                        }
                        var rows = [];
                        return getParsedRows(settings.autocompletionType, data, [], settings);
                    }
                },
                formatItem: function(row, i, n) {
                    if (row) {
                        return getFormattedItem(settings.autocompletionType, settings, row);
                    }
                },
                extraParams: SetExtraParams(settings),
                resultsClass: settings.resultsClass,
                resultsEvenClass: settings.resultsEvenClass,
                resultsOddClass: settings.resultsOddClass,
                resultsOverClass: settings.resultsOverClass,
                viewAllClass: settings.viewAllClass,
                showViewAll: settings.showViewAll,
                viewAllText: settings.tokens.viewAllTkn,
                highlight: settings.highlight,
                selectFirst: settings.selectFirst,
                showHelp: settings.showHelp,
                helpLabelText: settings.tokens.helpLabelTkn,
                //multiple: settings.multiple,                
                fillInputOnKeyUpDown: settings.fillInputOnKeyUpDown,
                autoFill: ((settings.autocompletionType.toLowerCase() === 'keyword' || settings.autocompletionType.toLowerCase() === 'calendarkeyword') && settings.autoFill) ? true : false
            });

            //Event handlers
            //OnItemSelect EventHandler
            if ($.isFunction(settings.onItemSelect)) {
                $("#" + settings.controlId)._djResult(function(e) {
                    window.globalSettingsObj.onItemSelect(arguments[1]);
                    e.stopPropagation();
                    return false;
                });
            }

            //onViewAllClick EventHandler
            if ($.isFunction(settings.onViewAllClick)) {
                $("#" + settings.controlId)._djViewAll(function(e) {
                    var data = arguments[1];
                    if (data) {
                        data.autocompletionType = window.globalSettingsObj.autocompletionType;
                        data.options = (window.globalSettingsObj.options) ? (window.globalSettingsObj.options) : null;
                    }
                    window.globalSettingsObj.onViewAllClick(data);
                    e.stopPropagation();
                    return false;
                });
            }

            //OnViewMorePrivateMarketsClick EventHandler
            if ($.isFunction(settings.onViewMorePrivateMarketsClick)) {
                if (np.web.widgets.autocomplete.prototype.events["viewMorePrivateMarketsEventRegistered "] === false) {
                    $(document).on('click', 'a.ac_viewMore', function(e) {
                        var parentTrTag = $(this).closest("tr").get(0);
                        var parentContainerDiv = $(this).closest("div." + window.globalSettingsObj.resultsClass).get(0);
                        var data = $(parentTrTag).data("ac_cat_data");
                        $('#' + window.globalSettingsObj.controlId).focus();
                        window.globalSettingsObj.onViewMorePrivateMarketsClick(data);
                        $(parentContainerDiv).show();
                        e.stopPropagation();
                        return false;
                    });
                    np.web.widgets.autocomplete.prototype.events["viewMorePrivateMarketsEventRegistered "] = true;
                }
            }

            //OnHelpRowClick EvenHandler
            if ($.isFunction(settings.onHelpRowClick)) {
                $("#" + settings.controlId)._djHelpRowClick(function(e) {
                    var data = arguments[1];
                    if (data) {
                        data.autocompletionType = window.globalSettingsObj.autocompletionType;
                        data.options = (window.globalSettingsObj.options) ? (window.globalSettingsObj.options) : null;
                    }
                    window.globalSettingsObj.onHelpRowClick(data);
                    e.stopPropagation();
                    return false;
                });
            }

            //OnInfoClick EventHandler
            if ($.isFunction(settings.onInfoClick)) {
                if (np.web.widgets.autocomplete.prototype.events["infoEventRegistered "] === false) {
                    $(document).on('click', 'a.ac_info', function(e) {
                        var parentTrTag = $(this).closest("tr").get(0);
                        var parentContainerDiv = $(this).closest("div." + window.globalSettingsObj.resultsClass).get(0);
                        var data = $(parentTrTag).data("ac_data").data;
                        $('#' + window.globalSettingsObj.controlId).focus();
                        window.globalSettingsObj.onInfoClick(data);
                        $(parentContainerDiv).show();
                        e.stopPropagation();
                        return false;
                    });
                    np.web.widgets.autocomplete.prototype.events["infoEventRegistered "] = true;
                }
            }

            //OnPromoteClick EventHandler
            if ($.isFunction(settings.onPromoteClick)) {
                if (np.web.widgets.autocomplete.prototype.events["promoteEventRegistered "] === false) {
                    $(document).on('click', 'a.ac_promote', function(e) {
                        var parentTrTag = $(this).closest("tr").get(0);
                        var parentContainerDiv = $(this).closest("div." + window.globalSettingsObj.resultsClass).get(0);
                        var data = $(parentTrTag).data("ac_data").data;
                        $('#' + window.globalSettingsObj.controlId).focus();
                        window.globalSettingsObj.onPromoteClick(data);
                        $(parentContainerDiv).show();
                        e.stopPropagation();
                        return false;
                    });
                    np.web.widgets.autocomplete.prototype.events["promoteEventRegistered "] = true;
                }
            }

            //OnNotClick EventHandler
            if ($.isFunction(settings.onNotClick)) {
                if (np.web.widgets.autocomplete.prototype.events["notEventRegistered "] === false) {
                    $(document).on('click', 'a.ac_not', function(e) {
                        var parentTrTag = $(this).closest("tr").get(0);
                        var parentContainerDiv = $(this).closest("div." + window.globalSettingsObj.resultsClass).get(0);
                        var data = $(parentTrTag).data("ac_data").data;
                        $('#' + window.globalSettingsObj.controlId).focus();
                        window.globalSettingsObj.onNotClick(data);
                        $(parentContainerDiv).show();
                        e.stopPropagation();
                        return false;
                    });
                    np.web.widgets.autocomplete.prototype.events["notEventRegistered "] = true;
                }
            }

            //OnDiscontClick EventHandler
            if ($.isFunction(settings.onDiscontClick)) {
                if (np.web.widgets.autocomplete.prototype.events["discontEventRegistered "] === false) {
                    $(document).on('click', 'a.ac_discont', function(e) {
                        var parentTrTag = $(this).closest("tr").get(0);
                        var parentContainerDiv = $(this).closest("div." + window.globalSettingsObj.resultsClass).get(0);
                        var data = $(parentTrTag).data("ac_data").data;
                        $('#' + window.globalSettingsObj.controlId).focus();
                        window.globalSettingsObj.onDiscontClick(data);
                        $(parentContainerDiv).show();
                        e.stopPropagation();
                        return false;
                    });
                    np.web.widgets.autocomplete.prototype.events["discontEventRegistered "] = true;
                }
            }
        }

        //Initialize Autocomplete
        function initAutoComplete(jSONobject) {
            if (jSONobject) {
                // We can use jQuery 1.4.2+ here
                var autosuggestPrototype = np.web.widgets.autocomplete.prototype;
                var suggestContext = jSONobject.suggestContext;
                if (suggestContext === undefined || $.trim(suggestContext).length === 0) {
                    if (autosuggestPrototype.suggestContextObj.callInitiated != true) {
                        getSuggestContextAndProcessRequest(jSONobject);
                    }
                    else if (autosuggestPrototype.suggestContextObj.authToken != null) {
                        jSONobject.suggestContext = URLDecode(autosuggestPrototype.suggestContextObj.authToken);
                        processRequest.call(np.web.widgets, jSONobject);
                    } else {
                        np.web.widgets.autocomplete.prototype.settingsArrObj.push(jSONobject);
                    }
                }
                else {
                    jSONobject.suggestContext = URLDecode(suggestContext);
                    processRequest.call(np.web.widgets, jSONobject);
                }
            }
        }
    };

    //Global variables
    np.web.widgets.autocomplete.prototype = {
        jQuery: null,
        filesadded: "",
        loadingAssets: false,
        resourceLoadingInitialized: false,
        resourcesLoaded: false,
        requireJSInitialized: false,
        requireJSLoaded: false,
        suggestContextObj: { 'callInitiated': false, 'authToken': null },
        settingsArrObj: [],
        events: { 'promoteEventRegistered ': false,
            'infoEventRegistered ': false,
            'discontEventRegistered ': false,
            'notEventRegistered ': false,
            'viewMorePrivateMarketsEventRegistered ': false
        }
    }
}

//AutoSuggest Tokens Object
np.web.widgets.tokens.autocomplete = {
    companyTkn: "${companyTkn}",
    executiveTkn: "${executiveTkn}",
    industryTkn: "${industryTkn}",
    sourceTkn: "${sourceTkn}",
    keywordTkn: "${keywordTkn}",
    privateMarketCompanyHeaderTkn: "${privateMarketCompanyHeaderTkn}",
    privateMarketIndustryHeaderTkn: "${privateMarketIndustryHeaderTkn}",
    privateMarketRegionHeaderTkn: "${privateMarketRegionHeaderTkn}",
    region_allTkn: "${region_allTkn}",
    region_countryTkn: "${region_countryTkn}",
    region_stateOrProvinceTkn: "${region_stateOrProvinceTkn}",
    region_metropolitanAreaTkn: "${region_metropolitanAreaTkn}",
    region_subNationalRegionTkn: "${region_subNationalRegionTkn}",
    region_supranationalRegionTkn: "${region_supranationalRegionTkn}",
    newssubjectTkn: "${newsSubjectTkn}",
    infoTitleTknPre: "${infoTitleTknPre}",
    infoTitleTknPost: "${infoTitleTknPost}",
    promoteTitleTkn: "${promoteTitleTkn}",
    notTitleTkn: "${notTitleTkn}",
    sourcefamilyTkn: "${sourcefamilyTkn}",
    publicationTkn: "${publicationTkn}",
    webpageTkn: "${webpageTkn}",
    multimediaTkn: "${multimediaTkn}",
    pictureTkn: "${pictureTkn}",
    blogTkn: "${blogTkn}",
    disContTkn: "${disContTkn}",
    viewAllTkn: "${viewAllTkn}",
    helpLabelTkn: "${helpLabelTkn}",
    privateMarketCompanyViewMoreTkn: "${privateMarketCompanyViewMoreTkn}",
    privateMarketIndustryViewMoreTkn: "${privateMarketIndustryViewMoreTkn}",
    privateMarketRegionViewMoreTkn: "${privateMarketRegionViewMoreTkn}",
    currencycrossrateTkn: "${currencycrossrateTkn}",
    commodityTkn: "${commodityTkn}",
    commodityaliasTkn: "${commodityaliasTkn}",
    journalistTkn: "${publicationTkn}"
};